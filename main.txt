library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity main is
    Port(clk100, rst : in STD_LOGIC;
         switch : in std_logic_vector(3 downto 0);
         leds : out std_logic_vector(3 downto 0));
end main;

architecture Behavioral of main is


--the input REG
component REG 
generic(n: positive := 2);
   port(clk: in std_logic;
        en: in std_logic;
		d: in std_logic_vector (n-1 downto 0);
		q: out std_logic_vector (n-1 downto 0));
end component;

--the output reg
component REG_High_Z 
generic(n: positive := 2);
   port(clk: in std_logic;
        en: in std_logic;
		d: in std_logic_vector (n-1 downto 0);
		q: inout std_logic_vector (n-1 downto 0));
end component;

--the processor
component kcpsm6 
generic(                 hwbuild : std_logic_vector(7 downto 0) := X"00";
                  interrupt_vector : std_logic_vector(11 downto 0) := X"3FF";
           scratch_pad_memory_size : integer := 64);
port (                   address : out std_logic_vector(11 downto 0);
                       instruction : in std_logic_vector(17 downto 0);
                       bram_enable : out std_logic;
                           in_port : in std_logic_vector(7 downto 0);
                          out_port : out std_logic_vector(7 downto 0);
                           port_id : out std_logic_vector(7 downto 0);
                      write_strobe : out std_logic;
                    k_write_strobe : out std_logic;
                       read_strobe : out std_logic;
                         interrupt : in std_logic;
                     interrupt_ack : out std_logic;
                             sleep : in std_logic;
                             reset : in std_logic;
                               clk : in std_logic);
end component;

--the program

component BitSwitch_with_Debouncing_asm
 Port  (        address : in std_logic_vector(11 downto 0);
            instruction : out std_logic_vector(17 downto 0);
                 enable : in std_logic;
                    clk : in std_logic);
end component;

--signals from the processor
signal address : std_logic_vector(11 downto 0) ;
signal instruction : std_logic_vector (17 downto 0);
signal port_id : std_logic_vector (7 downto 0);
signal out_port :std_logic_vector (7 downto 0);
signal in_port : std_logic_vector (7 downto 0);
signal write_strobe : std_logic  ;
signal read_strobe : std_logic  ;
signal interrupt : std_logic  ;
signal interrupt_ack : std_logic  ;
signal bram_enable,k_write_strobe: std_logic;

-- internal signals
signal choose_input: std_logic;   --en input reg
signal choose_output: std_logic;  --en output reg

begin

processor: kcpsm6  port map(address => address,         
                            instruction => instruction,
                            bram_enable => bram_enable,
                            in_port => in_port,
                            out_port => out_port,
                            port_id => port_id,
                            write_strobe => write_strobe,
                            k_write_strobe => k_write_strobe,
                            read_strobe => read_strobe,
                            interrupt => '0',
                            interrupt_ack => interrupt_ack,
                            sleep => '0',
                            reset => rst,
                            clk => clk100);
      
                                         
program_rom: BitSwitch_with_Debouncing_asm Port map (address => address,
                                                     instruction => instruction,
                                                     enable => bram_enable,                             
                                                     clk => clk100);

switchs_reg: REG generic map(n => 4)  -- 4 bit register
    port map(clk => clk100,
             en => choose_output, 
             d => out_port(3 downto 0),
		     q => leds);
		    
leds_reg: REG_High_Z generic map(n => 4)  -- 4 bit register
    port map(clk => clk100,
             en => choose_input, 
             d => switch,
		     q => in_port(3 downto 0));
                            
interrupt <= '0';  -- no interupt                       
in_port(7 downto 4)<= "0000"; 

-- process for output register

process(write_strobe) -- we dont put port_id because we are only interested to look at port_id when write_strobe ='1'
begin

if (write_strobe ='1') and (port_id = x"01") then
        choose_output <= '1';
else
        choose_output <= '0';
end if;
end process;

-- process for input register

process(read_strobe) -- we dont put port_id because we are only interested to look at port_id when write_strobe ='1'
begin

if (read_strobe ='1') and (port_id = x"00") then
        choose_input <= '1';
else
        choose_input <= '0';
end if;
end process;

end Behavioral;



